// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  hashedPassword String?
  emailVerified DateTime?
  image         String?
  isVerified    Boolean  @default(false)
  forgotPasswordToken String?
  forgotPasswordTokenExpiry DateTime?
  verificationToken String?
  verificationTokenExpiry DateTime?
  participants  Participant[]
  webinars      Webinar[]
  accounts      Account[]
  sessions      Session[]
  role          ROLE     @default(USER)
}

enum ROLE {
  ADMIN
  USER
}

//Webinar model

model Webinar {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  date        DateTime
  time        DateTime
  imageUrl       String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  participants Participant[]
}

model Participant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  webinar   Webinar  @relation(fields: [webinarId], references: [id], onDelete: Cascade)
  webinarId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  name      String
  email     String
  number    Int
  age       Int
  address   String
  occupation String
  company   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
