// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  idNumber      String   @unique
  firstName     String
  lastName      String
  name          String
  email         String?   
  password String @default("!def@ult")
  image         String?
  phone         String?
  address       String?
  course       String
  year          String
  department   String
  isEmailVerified    Boolean  @default(false)
  forgotPasswordToken String?
  forgotPasswordTokenExpiry DateTime?
  verificationToken String?
  verificationTokenExpiry DateTime?
  participants  Participant[]
  webinars      Webinar[]
  sessions      Session[]
  role          ROLE     @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum ROLE {
  ADMIN
  USER
  STAFF
}

enum WEBINAR_STATUS {
  UPCOMING
  STARTED
  ENDED
}

model Webinar {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  speaker     String
  date        DateTime
  time        String
  imageUrl       String
  isPosted    Boolean  @default(false)
  status     WEBINAR_STATUS @default(UPCOMING)
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  participants Participant[]
}

model Participant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  webinar   Webinar  @relation(fields: [webinarId], references: [id], onDelete: Cascade)
  webinarId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  name      String?
  email     String?
  number    Int?
  age       Int?
  address   String?
  occupation String?
  company   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
